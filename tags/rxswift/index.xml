<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RxSwift on Geektree0101</title><link>/tags/rxswift/</link><description>Recent content in RxSwift on Geektree0101</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 18 Sep 2019 15:26:05 +0000</lastBuildDate><atom:link href="/tags/rxswift/index.xml" rel="self" type="application/rss+xml"/><item><title>맛있는 반응형 스파게티 레시피</title><link>/blog/blog13/</link><pubDate>Wed, 18 Sep 2019 15:26:05 +0000</pubDate><guid>/blog/blog13/</guid><description>Rx(ReactiveX)는 정말 힙하고 멋지고 .. Awesome합니다.
Map, FlatMap, Merge, withLastestFrom등과 같은 수 많은 연산자들과 유연한 스케줄링 및 멀티스레딩 등…
요즘 주변 개발자들을 봤을 때, 코드 레시피에서 빠질 수 없는 재료이기도 합니다.
필자도 Rx를 많이 좋아합니다. 몇 년간 Rx를 가지고 여러가지 코드를 요리한 레시피를 소개해볼까 합니다.
1. FlatMap/SwichMap 등 Rx에서 제공하는 여러 연산자를 체이닝해서 사용하면 멋지고 아름답습니다. 필요에 따라 변환 또는 조합 연산자를 활용하여 적절히 다른형태의 Observable을 반환 할 수 있습니다.</description></item><item><title>Texture Reactive Wrapper [Let us: Go! 2018 Summer]</title><link>/blog/2018-07-21_texture-reactive-wrapper-let-us-go-2018-summer-5e9ac4f0729b/</link><pubDate>Sat, 21 Jul 2018 11:31:54 +0000</pubDate><guid>/blog/2018-07-21_texture-reactive-wrapper-let-us-go-2018-summer-5e9ac4f0729b/</guid><description>본 게시물은 Let us: Go! 2018 summer 발표내용을 정리한 게시물 입니다.
세션은 크게 3가지를 목표로 합니다.
Texture를 처음 접하시는 분들을 위한 기초적인 내용 Texture 실제 프로덕트 적용사례 Texture x RxSwift 콜라보레이션 Texture는 UIKit를 Base로한 iOS UI Framework로써
Texture 고유의 특수한 메커니즘을 통해서 부드럽고 반응성 좋은 UI결과물을 보여줍니다. 또한, UIKIT에서 부족하거나 필요한 부분까지 다루고 있는 라이브러리입니다.
ex) Text뒤에 붙는 more 같은 터치가능한 Text, Progressive Image loading, Placeholder 등등.</description></item><item><title>Texture + RxSwift Interactive Wrapper</title><link>/blog/2018-04-18_texture-rxswift-interactive-wrapper-d3c9843ed8d7/</link><pubDate>Wed, 18 Apr 2018 04:24:21 +0000</pubDate><guid>/blog/2018-04-18_texture-rxswift-interactive-wrapper-d3c9843ed8d7/</guid><description>How to make RxSwift Interactive wrapper for Texture?
Basically, Texture provides various basic components as shown in the picture below.
Especially, I focused on ASControlNode to make reactive wrapper.
Because, Basically RxCocoa offer various interactive wrapper such as UIButton tap wrapper, UIGestureRecognizer event wrapper etc.
ref: https://github.com/ReactiveX/RxSwift/blob/master/RxCocoa/iOS/UIGestureRecognizer%2BRx.swift
https://github.com/ReactiveX/RxSwift/blob/master/RxCocoa/iOS/UIButton%2BRx.swift
So, If i focused on ASControlNode then i guessed that i could make convenience interactive wrappers on ASImageNode(UIImageView), ASNetworkImageNode(UIImageView), ASButtonNode and so on.</description></item></channel></rss>