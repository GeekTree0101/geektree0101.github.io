<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>android on Geektree0101</title><link>/tags/android/</link><description>Recent content in android on Geektree0101</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 04 May 2020 04:06:32 +0000</lastBuildDate><atom:link href="/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>iOS &amp; Android Declarative UI Programming 방식이 가져온 변화들</title><link>/blog/blog10/</link><pubDate>Mon, 04 May 2020 04:06:32 +0000</pubDate><guid>/blog/blog10/</guid><description>Hello Declarative UI Programming! 선언적인 UI 개발방식의 역사는 짧지만은 않습니다. 애초에 웹기술에서는 기본적으로 사용 되어왔던 방식입니다.
몇 년간 frame을 직접계산하거나 Constraints(제약)을 주는 방식으로 UI를 배치해오던 시절을 지나 현재 Native(Android및 iOS) 개발에 있어서도 선언적으로 UI를 개발하는 시대가 왔다는 사실이 기쁘지 않을 수가 없습니다.
3년전 웹개발을 그만두고 현업에서 iOS를 개발시작했을 때만해도 auto-layout과 constraints개발 방식에 대한 생산성과 유지보수 및 가독성에 좋지 않아 선언적으로 레이아웃을 설계할 수 있는 UI Framework인 Texture(AsyncDisplayKit)로 퉁쳐서 날로먹으며 지금까지 잘 사용해왔습니다.</description></item></channel></rss>